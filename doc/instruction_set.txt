DCC GDP-8 Architecture
======================

A 64 Bit, 24 Bit Address, Little-Endian Byte-based Flat-Address Model, Load Store Architecture Virtual Machine.

Instructions:
	OP:	TYPE:		DESCRIPTION:
	HLT	Z		Halt
	INT	U		Trigger a software Interrupt, IV=$ARG
	EUM	LJC		Enter Usermode at $ADDR
	IRET	Z		Return from Interrupt Service Routine
	LOAD	LS		Load
	ST	LS		Store
	LDB	LS		Load Byte
	STB	LS		Store Byte
	ILOAD	ILS		Load
	IST	ILS		Store
	ILDB	ILS		Load Byte into Lower 8 Bit
	ISTB	ILS		Store Byte of Lower 8 Bit
	SAVE	Z		Push all register to stack
	RSTR	Z		Pop all register from stack
	ADD	D		Add
	SUB	D		Subtract
	INC	U		Increment
	DEC	U		Decrement
	MUL	D		Multipy
	DIV	D		Divide
	MOD	D		Modulo
	AND	D		And
	OR	D		Or
	NOT	U		Not
	XOR	D		XOR
	ROTR	U		Rotate Right
	ROTL	U		Rotate Left
	SHR	U		Shift Right
	SHL	U		Shift Left
	SWP	D		Swap content of register
	MOV	D		Move %SRC to %DST
	PUSH	U		Push
	POP	U		Pop
	CMP	D		Compare (Sets / Clears E and G)
	TCH	U		Touch (Set / Clear Z and N)
	RST	Z		Reset all flags
	JMP	{N,S,L,R}JC	Jump
	J	{N,S,L,R}JC	Jump if the flag is true
	CALL	{N,S,L,R}JC	Call
	C	{N,S,L,R}JC	Call if the flag is true
	RET	Z		Return
	IO	IO		IO Operation


Registers:
	00~FF	(64 Bit):	General Purpose Register
	STATUS	( 8 Bit):	Status
	PC	(24 Bit):	Program Counter
	SP	(24 Bit):	Stack Pointer
	IV	( 8 Bit):	Interrupt Vector
	IPC	(24 Bit):	Saved PC from Interrupt
	

Instruction Formats:

Zero Operand Instruction Format (Z):	(1 Byte)
+---+---+---+---+---+---+---+---+
|              O P              |
+---+---+---+---+---+---+---+---+

One Operand Register Instruction Format (U):	(2 Bytes)
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|              O P              |           A   R   G           |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
(ARG can be a register number or immediate operand depending on the instruction)

Two Operand Register Instruction Format (D):	(3 Bytes)
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|              O P              |           D   S   T           |           S   R   C           |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

Normal Jump/Call Instruction (NJC):	(4 Bytes)
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|              O P              |   |S I Z E| I | C | CONDITION |                         A   D   D   R                         |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

Short Jump/Call Instruction (SJC):	(3 Bytes)
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|              O P              |   |S I Z E| I | C | CONDITION |         A   D   D   R         |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

Long Jump/Call Instruction (LJC):	(5 Bytes)
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|              O P              |   |S I Z E| I | C | CONDITION |  =>
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|                                           A   D   D   R                                       |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
Relative Jump/Call Instruction (RJC):	(4 Bytes)
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|              O P              |   |S I Z E| I | C | CONDITION |                     O   F   F   S   E   T                     | (Two's Completment signed OFFSET)
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

LOAD / STORE Instruction Format (LS):	(5 Bytes)
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|         O   P         | I |IND|           R   E   G           |  =>
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|                                           A   D   D   R                                       |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

Indexed (ILS):			(6 Bytes)
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|             O   P             |           R   E   G           |       I   N   D   E   X       |  =>
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|                                           A   D   D   R                                       |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

IO Instruction Format (IO):		(4 Bytes)
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
| 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |           D   E   V           |             O   P             |           R   E   G           |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

Status Register Format:
+---+---+---+---+---+---+---+---+
| 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |
+---+---+---+---+---+---+---+---+
| B | O | N | Z | E | G | U | I |
+---+---+---+---+---+---+---+---+

B:	The Bit (Can be Carry Flag, or just a 1 Bit register)
O:	Overflow
N:	Negative
Z:	Zero
E:	Equal
G:	Greater Than
U:	Usermode
I:	Interrupt


Interrupt Handling:
When a interrupt is occurred, CPU will disable Interrupt, Jump to 0xF00000 + %IV,
after Interrupt Service Routine finished interrupt handling, a IRET instruction will
enable Interrupt again, and restore the original %PC
