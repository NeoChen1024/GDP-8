DCC GDP-8 Architecture
======================

* 64 Bit
* RISC?
* Load-Store Architecture
* 256 Registers
* Flat Address
* Single Address Space
* Byte-Orientated

Instructions:
	NAME:	TYPE / REG:	DESCRIPTION:

	Special:
	NOP	Z (NO)		Nope
	HLT	Z (NO)		Halt
	BRK	Z (NO)		Break
	SLP	IF (NO)		Sleep milliseconds
	WAIT	Z (NO)		Wait for interrupt
	IDLE	Z (NO)		CPU idle
	INT	U (NO)		Trigger a software Interrupt, IV=$ARG
	EUM	LJC (NO)	Enter Usermode at $ADDR
	SYS	SYS (YES)	System Call
	IO	IO (YES)	IO Operation
	IRET	Z (NO)		Return from Interrupt Service Routine

	Memory Reference:
	LD	LS (YES)	Load
	ST	LS (YES)	Store
	LI	IQ (YES)	Load 16 Bit intermediate
	LIW	IW (YES)	Load 64 Bit intermediate

	Integer Arithmetic:
	ADD	D (YES)		Add
	SUB	D (YES)		Subtract
	INC	U (YES)		Increment
	DEC	U (YES)		Decrement
	MUL	D (YES)		Multiply
	DIV	D (YES)		Divide
	MOD	D (YES)		Modulo
	ADDI	IQ (YES)	Add intermediate
	SUBI	IQ (YES)	Subtract intermediate
	INCI	IQ (YES)	Increment intermediate
	DECI	IQ (YES)	Decrement intermediate

	Bitwise Operation:
	AND	D (YES)		And
	OR	D (YES)		Or
	XOR	D (YES)		XOR
	NOT	U (YES)		Not
	RTR	U (YES)		Rotate Right
	RTL	U (YES)		Rotate Left
	SHR	U (YES)		Shift Right
	SHL	U (YES)		Shift Left
	RTBR	U (YES)		Rotate Byte Right
	RTBL	U (YES)		Rotate Byte Left
	SHBR	U (YES)		Shift Byte Right
	SHBL	U (YES)		Shift Byte Left

	Data Moving:
	SWP	D (YES)		Swap content of register
	MOV	D (YES)		Move %SRC to %DST
	MOVC	D (YES)		Move %SRC to %DST and clear %SRC

	Stack:
	PUSH	U (YES)		Push
	POP	U (YES)		Pop

	Flag Operation:
	CMP	D (YES)		Compare (Sets / Clears E and G)
	TCH	U (YES)		Touch (Set / Clear Z and N)
	STF	U (YES)		Set flags
	GTF	U (YES)		Get flags
	STB	Z (NO)		Set B flag
	CLB	Z (NO)		Clear B flag
	CLR	Z (NO)		Clear all flags

	Jump / Branch:
	J	JC		Jump
	JS	JC		Jump to Subroutine
	JR	RJC		Conditional or Relative Jump
	JSR	RJC		Conditional or Relative Jump to Subroutine
	RS	Z (NO)		Subroutine Return

	Call:
	C	JC		Call
	CR	RJC		Call if the flag is true
	R	Z (NO)		Return

Registers:
	R00~RFF	(64 Bit):	General Purpose Register
	STATUS	( 8 Bit):	Status
	PC	(24 Bit):	Program Counter
	SP	(24 Bit):	Stack Pointer
	SRA	(24 Bit):	Subroutine Return Address
	IV	( 8 Bit):	Interrupt Vector
	IPC	(24 Bit):	Saved PC from Interrupt

General Purpose Register Alias:
	Name:	ALIAS:	DESCRIPTION:
	R00	A	Accumulator
	R01	B	Register B
	R02	C	Counter
	R03	D	Data
	RF0~RFF	X0~XF


Instruction Formats:
Zero Operand Instruction Format (Z):	(1 Byte)
+---+---+---+---+---+---+---+---+
|             O   P             |
+---+---+---+---+---+---+---+---+

One Operand (U):	(2 Bytes)
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|             O   P             |           A   R   G           |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
(ARG can be a register number or immediate operand depending on the instruction)

Two Operand (D):	(3 Bytes)
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|             O   P             |           D   S   T           |           S   R   C           |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

One and Quarter (IQ):	(4 Bytes)
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|             O   P             |           R   E   G           |                       V   A   L   U   E                       |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
(VALUE:	16 Bit)

One and Full Word (IW):	(10 Bytes)
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|             O   P             |           R   E   G           |	==>
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|                                                       V   A   L   U   E                                                       | (Lower Half)
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|                                                       V   A   L   U   E                                                       | (Higher Half)
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
(VALUE:	64 Bit)

Jump/Call (JC):		(4 Bytes)
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|           O   P           | I |                                           A   D   D   R                                       |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

Relative Jump/Call (RJC):	(4 Bytes)
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|             O   P             | I | CONDITION |                             O   F   F   S   E   T                             | (Two's Complement signed OFFSET)
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
(Condition: X (Unconditionally), B, O, N, Z, E, G)

LOAD / STORE Instruction Format (LS):	(6 Bytes)
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|             O   P             |   I N D E X   |IND| I |S I Z E|           R   E   G           |	==>
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|                                       A   D   D   R                                           |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
(Size:	W = 64 Bit, A = 24 Bit, B = 8 Bit)
(I:	Indirect)
(IND:	Indexed)
(INDEX:	Which register to use (X0 ~ XF))

System Call (SYS):	(4 Bytes)
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|             O   P             |           N   U   M           |           R   E   G           |           R   E   G           |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

IO (IO):		(4 Bytes)
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|             O   P             |           D   E   V           |             O   P             |           R   E   G           |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

Status Register Format:
+---+---+---+---+---+---+---+---+
| 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |
+---+---+---+---+---+---+---+---+
| B | O | N | Z | E | G | X | X |
+---+---+---+---+---+---+---+---+

B:	The Bit (Can be Carry Flag, or just a 1 Bit register)
O:	Overflow
N:	Negative
Z:	Zero
E:	Equal
G:	Greater Than

Memory Mapping:	(Just convention, no actual protection)
0x000000~0xBFFFFF: (12288K)	Normal
0xC00000~0xC0FFFF: (   64K)	Stack
0xC10000~0xEFFFFF: ( 1984K)	Kernel
0xF00000~0xF00FFF: (    4K)	ISR Entry Point
0xF01000~0xFFFFFF: ( 1020K)	Might be MMIO in the Future

Interrupt Handling:
When a interrupt is occurred, CPU will disable Interrupt, Jump to 0xF00000 + (%IV << 4),
after Interrupt Service Routine finished interrupt handling, a IRET instruction will
enable Interrupt again, and restore the original %PC
